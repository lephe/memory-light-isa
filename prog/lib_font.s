;---
;	Font library
;	No dependencies. 16-bit colors.
;---

;	putc()
;	Puts a character on the screen; (x, y) is the coordinate of the top-
;	left corner.
;
;	@args	x, y, c
;	@stack	color(16)
putc:
	; Quickly change coordinate system (before function starts)
	leti	r0 122
	sub3	r2 r0 r2

	; Get a pointer to the glyph data like a boss. I know that I should
	; save r1-r3, but I don't care that much (since it's font_lea)
	push	64 r7
	call	font_lea
	pop	64 r7

	; Add offset (35 * c)
	add2	r0 r3
	add2	r0 r3
	add2	r0 r3
	shift	left r3 5
	add2	r0 r3

	; Get a pointer to the appropriate video RAM location
	leti	r3 0x10000

	; Add 160 * y (* 16)
	shift	left r2 9
	add2	r3 r2
	shift	left r2 2
	add2	r3 r2

	; Add x (* 16)
	shift	left r1 4
	add2	r3 r1

	pop	16 r1
	getctr	a0 r2
	setctr	a0 r0
	getctr	a1 r0
	setctr	a1 r3

	; At this point:
	;   r0 = saved a1, r1 = color, r2 = saved a0
	;   a0 = source glyph, a1 = destination VRAM
	; And in the end of the routine:
	;   r3 = x-counter, r4 = glyph bits (sometimes a1), r5 = y-counter
	push	64 r4
	push	64 r5

	leti	r5 7
_putc_line:
	leti	r3 5

_putc_pixel:
	readze	a0 1 r4
	cmpi	r4 0
	jumpif	z _putc_clear
_putc_set:
	write	a1 16 r1
	jump	_putc_pixel_end
_putc_clear:
	getctr	a1 r4
	add2i	r4 16
	setctr	a1 r4
_putc_pixel_end:
	sub2i	r3 1
	jumpif	nz _putc_pixel

	leti	r3 155
	shift	left r3 4
	getctr	a1 r4
	add2i	r4 r3
	setctr	a1 r4

	sub2i	r5 1
	jumpif	nz _putc_line

	; Restore context and leave
	pop	64 r5
	pop	64 r4
	setctr	a0 r2
	setctr	a1 r0
	return

;	puts()
;	Writes a zero-terminated string on the screen by repeatedly calling
;	putc() for each of the characters.
;
;	@args	x, y, str
;	@stack	color(16)
puts:
	pop	16 r0

	push	64 r7
	push	64 r6
	push	64 r5
	push	64 r4

	let	r6 r0
	getctr	a0 r4
	push	64 r4
	setctr	a0 r3

	let	r4 r1
	let	r5 r2

_puts_one:
	readze	a0 8 r3
	cmpi	r3 0
	jumpif	z _puts_end

	let	r1 r4
	let	r2 r5
	add2i	r4 6
	push	16 r6
	call	putc
	jump	_puts_one

_puts_end:
	pop	64 r4
	setctr	a0 r4
	pop	64 r4
	pop	64 r5
	pop	64 r6
	pop	64 r7
	return

; Here be dragons (fonts)
; Encoding:
;   - Each character (5 * 7) takes 35 bits
;   - Each glyph is stored from top to bottom, then from left to right
;   - All ASCII characters are present (thus 128 * 35 = 4480), in order
; Algorithm to draw a character (c, x0, y0, color):
;   y <- y0
;   Get a pointer to font + 35 * c
;   Repeat 7 times
;     x <- x0
;     Repeat 5 times
;       Fetch a bit
;       If it's 1, plot color at (x, y), otherwise do nothing
;       x <- x + 1
;     y <- y + 1

font_lea:
	getctr	pc r0
	; Add the size of this routine
	add2i	r0 24
	return

font:
	.const
